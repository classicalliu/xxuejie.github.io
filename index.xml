<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Less is more</title>
    <link>https://xuejie.space/</link>
    <description>Recent content on Less is more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Jul 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://xuejie.space/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to CKB Script Programming 2: Script Basics</title>
      <link>https://xuejie.space/2019_07_13_introduction_to_ckb_script_programming_script_basics/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xuejie.space/2019_07_13_introduction_to_ckb_script_programming_script_basics/</guid>
      <description>

&lt;p&gt;Last post introduced current CKB&amp;rsquo;s validation model. This post will get more fun, since we will show how to deploy script codes to CKB for real. I&amp;rsquo;m hoping after this post, you should be able to explore the CKB world and work on new script codes as you wish.&lt;/p&gt;

&lt;p&gt;Note even though I believe CKB&amp;rsquo;s programming model is quite stable now, development is still happening so there might be changes. I will try my best to make sure this post is updated but if anything confuses you, this post is describing CKB as of &lt;a href=&#34;https://github.com/nervosnetwork/ckb/commit/80b51a9851b5d535625c5d144e1accd38c32876b&#34;&gt;this commit&lt;/a&gt; now.&lt;/p&gt;

&lt;p&gt;A warning here: this will be a long post, since I want to fill in enough for the more interesting topic next week. So you don&amp;rsquo;t have to finish it at once if you don&amp;rsquo;t have enough time. I&amp;rsquo;ve tried to split it into individual sections, so you can try each one at a time.&lt;/p&gt;

&lt;h1 id=&#34;wording&#34;&gt;Wording&lt;/h1&gt;

&lt;p&gt;Before we continue, let&amp;rsquo;s distinguish between 2 terms: script, and script code.&lt;/p&gt;

&lt;p&gt;In this post and hopefully the whole series, we will distinguish between script, and script code. Script code actually refers to the program you write and compile to use on CKB. Script, on the other hand, actually refers to the script data structure used in CKB, which is a little more than just the script code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;Script&lt;/span&gt; {
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; args: Vec&amp;lt;Bytes&amp;gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; code_hash: &lt;span style=&#34;font-weight:bold&#34;&gt;H256&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; hash_type: &lt;span style=&#34;font-weight:bold&#34;&gt;ScriptHashType&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can ignore &lt;code&gt;hash_type&lt;/code&gt; for now, a future post will explain what it is and it&amp;rsquo;s interesting usage. Later in this post, we will show that &lt;code&gt;code_hash&lt;/code&gt; actually just identifies a script code, so for now we can just think of it as script code. What script also includes, is the &lt;code&gt;args&lt;/code&gt; part, which distinguishes script from script code. &lt;code&gt;args&lt;/code&gt; can be used here to provide additional arguments for a CKB script, for example, while people might all be using the same default lock script code, each of them might have their own pubkey hash, &lt;code&gt;args&lt;/code&gt; is exact the place to hold pubkey hash. This way each user of CKB can have different lock script, while sharing the same lock script code.&lt;/p&gt;

&lt;p&gt;Note that in most cases, script and script code can be used interchangably, but if you are confused at some places, it might be worthwhile to think of the difference between the 2.&lt;/p&gt;

&lt;h1 id=&#34;a-minimal-ckb-script-code&#34;&gt;A Minimal CKB Script Code&lt;/h1&gt;

&lt;p&gt;As you might have already heard, CKB is based on the open source RISC-V ISA. But what does that even mean? In my words, it means we are (sort of) embedding a real mini computer in CKB, instead of a virtual machine. The benefit of a real computer, is that you can write any logic you want in any language you want. The first few examples we show here will be written in C for simplicity(well I mean simplicity in the toolchain, not the &lt;a href=&#34;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html&#34;&gt;language&lt;/a&gt;), but later we will switch to JavaScript based script code, and hopefully show more languages in the series. On CKB there&amp;rsquo;s endless possibilities.&lt;/p&gt;

&lt;p&gt;As we mentioned about, CKB VM is more like a real mini computer. CKB script code also looks like a normal Unix style executable program we run on a computer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; main(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;&#34;&gt;char&lt;/span&gt;* argv[])
{
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When compiled via a C compiler, this will become a script code that is runnable on CKB. In other words, CKB just take plain old Unix style executables(but in RISC-V architecture instead of the popular x86 architecture), and run it in a virtual machine environment. If the program returns with 0 as the return code, we consider the script succeeds, all non-zero return codes will be considered script faliures.&lt;/p&gt;

&lt;p&gt;In the example above, we are showing a script code that always succeeds, since the return code will always be zero. Please don&amp;rsquo;t use this as your lock script code, otherwise your token can be taken away by anyone.&lt;/p&gt;

&lt;p&gt;But the example above won&amp;rsquo;t be interesting, here we will start with an interesting idea: personally I dislike carrot. I do know that carrot is great from a nutritional point of view, but I still want to avoid it due to the taste. Now what if I want to set a rule, that none of my cells on CKB has data that begin with &lt;code&gt;carrot&lt;/code&gt;? Let&amp;rsquo;s write a script code to ensure this.&lt;/p&gt;

&lt;p&gt;In order to ensure none of the cells can have &lt;code&gt;carrot&lt;/code&gt; in cell data, we need a way to first read cell data in the script. CKB provides &lt;code&gt;syscalls&lt;/code&gt; to help with this.&lt;/p&gt;

&lt;p&gt;To ensure the security of CKB script, each script has to run in an isolated environment that is totally separated from the main computer you are running CKB. This way it won&amp;rsquo;t be able to access data it doesn&amp;rsquo;t need, such as your private keys or passwords. However, for a script to be useful, there must be certain data it want to access, such as the cell a script guards, or a transaction a script validates. CKB provides &lt;code&gt;syscalls&lt;/code&gt; to ensure this, syscalls are defined in RISC-V standard, they provide a way to access certain resources provided by the environment. In a normal situation, the environment here means the operating system, but in the case of CKB VM, the environment refers to the actual CKB process. With syscalls, a CKB script can access the whole transaction containing itself, including inputs, outputs, witnesses, and deps.&lt;/p&gt;

&lt;p&gt;The good news, is that we have encapsulated syscalls in an easy to use &lt;a href=&#34;https://github.com/nervosnetwork/ckb-system-scripts/blob/66d7da8ec72dffaa7e9c55904833951eca2422a9/c/ckb_syscalls.h&#34;&gt;header file&lt;/a&gt;, you are very welcome to poke around this file to see how syscalls are implemented. The bottomline is you can just grab this header file and use the wrapped functions to make syscalls as you want.&lt;/p&gt;

&lt;p&gt;Now with the syscalls at hand, we can start with our carrot-forbidden script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;lt;memory.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;&#34;&gt;&amp;#34;ckb_syscalls.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; main(&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;&#34;&gt;char&lt;/span&gt;* argv[]) {
  &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; ret;
  size_t index = 0;
  &lt;span style=&#34;font-weight:bold&#34;&gt;volatile&lt;/span&gt; uint64_t len = 0; &lt;span style=&#34;font-style:italic&#34;&gt;/* (1) */&lt;/span&gt;
  &lt;span style=&#34;&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;&#34;&gt;char&lt;/span&gt; buffer[6];

  &lt;span style=&#34;font-weight:bold&#34;&gt;while&lt;/span&gt; (1) {
    len = 6;
    memset(buffer, 0, 6);
    ret = ckb_load_cell_by_field(buffer, &amp;amp;len, 0, index, CKB_SOURCE_OUTPUT,
                                 CKB_CELL_FIELD_DATA); &lt;span style=&#34;font-style:italic&#34;&gt;/* (2) */&lt;/span&gt;
    &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (ret == CKB_INDEX_OUT_OF_BOUND) {               &lt;span style=&#34;font-style:italic&#34;&gt;/* (3) */&lt;/span&gt;
      &lt;span style=&#34;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    }

    &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (memcmp(buffer, &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;carrot&amp;#34;&lt;/span&gt;, 6) == 0) {
      &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; -1;
    }

    index++;
  }

  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Several points worth explaining here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Due to C quirks, the &lt;code&gt;len&lt;/code&gt; field needs to be marked as &lt;code&gt;volatile&lt;/code&gt;. We will use it both as an input and output parameter, and CKB VM only can set the output when it lives in memory. &lt;code&gt;volatile&lt;/code&gt; ensures a C compiler keeps it as a RISC-V memory based variable.&lt;/li&gt;
&lt;li&gt;When making a syscall, we need to provide the following: a buffer to hold the data provided by the syscall; a &lt;code&gt;len&lt;/code&gt; field denoting both the buffer length, and available data length returned by the syscall; an offset into the input data buffer, and several parameters denoting the exact field we are fetching in the transaction. For more details, please refer to our &lt;a href=&#34;https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0009-vm-syscalls/0009-vm-syscalls.md&#34;&gt;RFC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For maximum flexibility, CKB uses the return value of the syscall to represent data fetching status: 0(or &lt;code&gt;CKB_SUCCESS&lt;/code&gt;) means success, 1(or &lt;code&gt;CKB_INDEX_OUT_OF_BOUND&lt;/code&gt;) means you have finished fetching all indices in a kind, 2(or &lt;code&gt;CKB_ITEM_MISSING&lt;/code&gt;) means an entity is not present, such as fetching a type script from a cell that doesn&amp;rsquo;t have one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So to recap, this script would loop through all output cells in the transaction, load the first 6 bytes of each cell data and test if those bytes match &lt;code&gt;carrot&lt;/code&gt;. If we found a match, the script would return &lt;code&gt;-1&lt;/code&gt;, denoting an error status, if no match is found, the script exits with &lt;code&gt;0&lt;/code&gt;, meaning execution success.&lt;/p&gt;

&lt;p&gt;To perform the loop, the script would keep an &lt;code&gt;index&lt;/code&gt; variable, in each loop iteration, it would tries to make the syscall to fetch the cell denoted by current &lt;code&gt;index&lt;/code&gt; value, if the syscall returns &lt;code&gt;CKB_INDEX_OUT_OF_BOUND&lt;/code&gt;, it means the script has iterated through all the cells, hence it just exits the loop, otherwise, the loop would continue, the cell data is tested, then &lt;code&gt;index&lt;/code&gt; variable is incremented for the next iteration.&lt;/p&gt;

&lt;p&gt;This concludes your first useful CKB script code! In the next section, we will see how we can deploy it to CKB and run it.&lt;/p&gt;

&lt;h1 id=&#34;deploying-a-script-to-ckb&#34;&gt;Deploying a Script to CKB&lt;/h1&gt;

&lt;p&gt;First, we need to compile the carrot source code written above. Since GCC already has upstream RISC-V support, you can of course use the official GCC to build your script code. Or you can use the &lt;a href=&#34;https://hub.docker.com/r/nervos/ckb-riscv-gnu-toolchain&#34;&gt;docker image&lt;/a&gt; we have prepared to save the trouble of compiling GCC:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls
carrot.c  ckb_consts.h  ckb_syscalls.h
$ sudo docker run --rm -it -v &lt;span style=&#34;font-style:italic&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;font-style:italic&#34;&gt;`&lt;/span&gt;:/code nervos/ckb-riscv-gnu-toolchain:xenial bash
root@dc2c0c209dcd:/# cd /code
root@dc2c0c209dcd:/code# riscv64-unknown-elf-gcc -Os carrot.c -o carrot
root@dc2c0c209dcd:/code# exit
exit
$ ls
carrot*  carrot.c  ckb_consts.h  ckb_syscalls.h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;rsquo;s it, CKB can use the compiled executable from GCC directly as scripts on chain, there&amp;rsquo;s no way for further processing. We can now deploy it on chain. Note that I will use CKB&amp;rsquo;s Ruby SDK since I used to be a Ruby programmer, and Ruby feels the most natural one(but not necessarily the best one) to me. Please refer to the official &lt;a href=&#34;https://github.com/nervosnetwork/ckb-sdk-ruby/blob/develop/README.md&#34;&gt;README&lt;/a&gt; for how to set it up.&lt;/p&gt;

&lt;p&gt;To deploy the script to CKB, we can just create a new cell, with the script code as cell data part:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; data = File.read(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;carrot&amp;#34;&lt;/span&gt;)
pry(main)&amp;gt; data.bytesize
=&amp;gt; 6864
pry(main)&amp;gt; carrot_tx_hash = wallet.send_capacity(wallet.address, CKB::Utils.byte_to_shannon(8000), CKB::Utils.bin_to_hex(data))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I simply create a new cell with enough capacity by sending tokens to myself. Now we can create the type script containing the carrot script code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; carrot_data_hash = CKB::Blake2b.hexdigest(data)
pry(main)&amp;gt; carrot_type_script = CKB::Types::Script.new(&lt;span style=&#34;font-style:italic&#34;&gt;code_hash&lt;/span&gt;: carrot_data_hash, &lt;span style=&#34;font-style:italic&#34;&gt;args&lt;/span&gt;: [])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Recall the Script data structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;Script&lt;/span&gt; {
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; args: Vec&amp;lt;Bytes&amp;gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; code_hash: &lt;span style=&#34;font-weight:bold&#34;&gt;H256&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; hash_type: &lt;span style=&#34;font-weight:bold&#34;&gt;ScriptHashType&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that instead of embedding the script code directly in the script data structure, we are only including the code hash, which is a Blake2b hash of the actual script binary code. Since carrot script doesn&amp;rsquo;t use an argument, we can use empty array for &lt;code&gt;args&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;Note I&amp;rsquo;m still ignoring &lt;code&gt;hash_type&lt;/code&gt; here, we will leave to a future post to see a different way of specifying code hash. For now, let&amp;rsquo;s keep it simple here.&lt;/p&gt;

&lt;p&gt;To run the carrot script, we need to create a new transaction, and set carrot type script as the type script of one of the output cells:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; tx = wallet.generate_tx(wallet2.address, CKB::Utils.byte_to_shannon(200))
pry(main)&amp;gt; tx.outputs[0].instance_variable_set(&lt;span style=&#34;font-style:italic&#34;&gt;:@type&lt;/span&gt;, carrot_type_script.dup)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s one more step needed: in order for CKB to locate the carrot script, we need to reference the cell containing carrot script in one of transaction deps:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; carrot_out_point = CKB::Types::OutPoint.new(&lt;span style=&#34;font-style:italic&#34;&gt;cell&lt;/span&gt;: CKB::Types::CellOutPoint.new(&lt;span style=&#34;font-style:italic&#34;&gt;tx_hash&lt;/span&gt;: carrot_tx_hash, &lt;span style=&#34;font-style:italic&#34;&gt;index&lt;/span&gt;: 0))
pry(main)&amp;gt; tx.deps.push(carrot_out_point.dup)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are ready to sign and send the transaction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;[44] pry(main)&amp;gt; tx.witnesses[0].data.clear
[46] pry(main)&amp;gt; tx = tx.sign(wallet.key, api.compute_transaction_hash(tx))
[19] pry(main)&amp;gt; api.send_transaction(tx)
=&amp;gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;0xd7b0fea7c1527cde27cc4e7a2e055e494690a384db14cc35cd2e51ec6f078163&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since this transaction does not have any cell containing &lt;code&gt;carrot&lt;/code&gt; in the cell data, the type script validates successfully. Now let&amp;rsquo;s try a different transaction that does have a cell that begins with &lt;code&gt;carrot&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; tx2 = wallet.generate_tx(wallet2.address, CKB::Utils.byte_to_shannon(200))
pry(main)&amp;gt; tx2.deps.push(carrot_out_point.dup)
pry(main)&amp;gt; tx2.outputs[0].instance_variable_set(&lt;span style=&#34;font-style:italic&#34;&gt;:@type&lt;/span&gt;, carrot_type_script.dup)
pry(main)&amp;gt; tx2.outputs[0].instance_variable_set(&lt;span style=&#34;font-style:italic&#34;&gt;:@data&lt;/span&gt;, CKB::Utils.bin_to_hex(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;carrot123&amp;#34;&lt;/span&gt;))
pry(main)&amp;gt; tx2.witnesses[0].data.clear
pry(main)&amp;gt; tx2 = tx2.sign(wallet.key, api.compute_transaction_hash(tx2))
pry(main)&amp;gt; api.send_transaction(tx2)
CKB::&lt;span style=&#34;font-style:italic&#34;&gt;RPCError&lt;/span&gt;: jsonrpc &lt;span style=&#34;font-style:italic&#34;&gt;error&lt;/span&gt;: {&lt;span style=&#34;font-style:italic&#34;&gt;:code&lt;/span&gt;=&amp;gt;-3, &lt;span style=&#34;font-style:italic&#34;&gt;:message&lt;/span&gt;=&amp;gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;InvalidTx(ScriptFailure(ValidationFailure(-1)))&amp;#34;&lt;/span&gt;}
from &lt;span style=&#34;font-style:italic&#34;&gt;/home/u&lt;/span&gt;buntu&lt;span style=&#34;font-style:italic&#34;&gt;/code/&lt;/span&gt;ckb-sdk-ruby&lt;span style=&#34;font-style:italic&#34;&gt;/lib/&lt;/span&gt;ckb&lt;span style=&#34;font-style:italic&#34;&gt;/rpc.rb:164:in `rpc_request&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see our carrot script rejects a transaction that generates a cell with carrot. Now I can use this script to make sure all my cells are free from carrots!&lt;/p&gt;

&lt;p&gt;So to recap, to deploy and run a script as type script, what we need to do is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compile the script to RISC-V executable binary&lt;/li&gt;
&lt;li&gt;Deploy the binary in a cell&amp;rsquo;s data part&lt;/li&gt;
&lt;li&gt;Create a type script data structure with the blake2b hash of the binary as &lt;code&gt;code hash&lt;/code&gt;, any required arguments of the script code in the &lt;code&gt;args&lt;/code&gt; part&lt;/li&gt;
&lt;li&gt;Create a new transaction with the type script set in one of the generated cells&lt;/li&gt;
&lt;li&gt;Include the outpoint to the cell containing the script code as one of the transaction deps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s really all you need! If your script has run into problems, those are the points you need to check.&lt;/p&gt;

&lt;p&gt;Although we only talk about type scripts here, lock script works exactly the same way. The only quirk you need to keep in mind, is that when you create a cell with a specificed lock script, the lock script won&amp;rsquo;t run here. It only runs when you are consuming the cell. So while type script can be used to create the logic that runs when you create the cell, lock script is used to create the logic that runs when you consume the cell. Given this consideration, please make sure your lock script is correct, otherwise you might be losing the tokens in the following scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your lock script has a bug that someone else can unlock your cell.&lt;/li&gt;
&lt;li&gt;Your lock script has a bug that no one(including you) can unlock your cell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One tip we can provide here, is always test your script as a type script attached to an output cell in your transaction, this way when error happens, you will know immediately, your tokens can stay safe.&lt;/p&gt;

&lt;h1 id=&#34;dissecting-the-default-lock-script-code&#34;&gt;Dissecting the Default Lock Script Code&lt;/h1&gt;

&lt;p&gt;With the knowledge we have, let&amp;rsquo;s look at the default lock script code included in CKB. To avoid confusion, we are looking at the lock script code as of &lt;a href=&#34;https://github.com/nervosnetwork/ckb-system-scripts/blob/66e2b3fc4fa3e80235e4b4f94a16e81352a812f7/c/secp256k1_blake160_sighash_all.c&#34;&gt;this commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The default lock script code would loop through all input cells that have the same lock script as itself, and perform the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It grabs the current transaction hash via a provided syscall.&lt;/li&gt;
&lt;li&gt;It grabs the corresponding witness data for current input.&lt;/li&gt;
&lt;li&gt;For the default lock script, it is assumed that the first argument in witness contains the recoverable signature signed by cell owner, and the rest arguments are optional user provided arguments.&lt;/li&gt;
&lt;li&gt;Default lock script code runs a blake2b hash on the concatenated binary data of the transaction hash, and all the user provided arguments(if exists).&lt;/li&gt;
&lt;li&gt;The blake2b hash result is then used as the message part for the secp256k1 signature verification. Note the actual signature is provided in the first argument in witness data structure.&lt;/li&gt;
&lt;li&gt;If the signature verification fails, the script exits with a failure return code. Otherwise it continues with the next iteration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note we talked about the difference between script and script code earlier. Each different pubkey hash would result in different lock script, hence if a transaction has input cells with the same default lock script code but different pubkey hash(hence different lock script), multiple instances of the default lock script code will be executed, each with its own set of cells sharing the same lock script.&lt;/p&gt;

&lt;p&gt;Now we can walk through different segments of the default lock script code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (argc != 2) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_WRONG_NUMBER_OF_ARGUMENTS;
}

secp256k1_context context;
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (secp256k1_context_initialize(&amp;amp;context, SECP256K1_CONTEXT_VERIFY) == 0) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_SECP_INITIALIZE;
}

len = BLAKE2B_BLOCK_SIZE;
ret = ckb_load_tx_hash(tx_hash, &amp;amp;len, 0);
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (ret != CKB_SUCCESS) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_SYSCALL;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When arguments are included in &lt;code&gt;args&lt;/code&gt; part of &lt;code&gt;Script&lt;/code&gt; data structure, they are presented to the actual running script program via the Unix conventional &lt;code&gt;arc&lt;/code&gt;/&lt;code&gt;argv&lt;/code&gt; way. To further preserve conventions, we insert a dummy argument at &lt;code&gt;argv[0]&lt;/code&gt;, so your first include argument starts at &lt;code&gt;argv[1]&lt;/code&gt;. In the case of default lock script code, it accepts one argument, which is the pubkey hash generated from the owner&amp;rsquo;s private key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;ret = ckb_load_input_by_field(NULL, &amp;amp;len, 0, index, CKB_SOURCE_GROUP_INPUT,
                             CKB_INPUT_FIELD_SINCE);
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (ret == CKB_INDEX_OUT_OF_BOUND) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; 0;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (ret != CKB_SUCCESS) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_SYSCALL;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the same technique as shown in the carrot example, we check if there&amp;rsquo;s more input cells to test. There&amp;rsquo;re 2 differences from previous examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we just want to know if a cell exists and don&amp;rsquo;t need any of the data, we can just pass in &lt;code&gt;NULL&lt;/code&gt; as the data buffer, and a &lt;code&gt;len&lt;/code&gt; variable with value 0. This way the syscall would skip data filling and just provided available data length and correct return code for processing.&lt;/li&gt;
&lt;li&gt;In the carrot example, we are looping through all inputs in the transaction, but here we just care about input cells of the same lock script. CKB named cells with the same lock(or type) script as cells with the same &lt;code&gt;group&lt;/code&gt;. And here, we can use &lt;code&gt;CKB_SOURCE_GROUP_INPUT&lt;/code&gt; instead of &lt;code&gt;CKB_SOURCE_INPUT&lt;/code&gt; denoting the syscalls to only count cells in the same group, i.e., cells who have the same lock script as the current cell.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;len = WITNESS_SIZE;
ret = ckb_load_witness(witness, &amp;amp;len, 0, index, CKB_SOURCE_GROUP_INPUT);
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (ret != CKB_SUCCESS) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_SYSCALL;
}
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (len &amp;gt; WITNESS_SIZE) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_WITNESS_TOO_LONG;
}

&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (!(witness_table = ns(Witness_as_root(witness)))) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_ENCODING;
}
args = ns(Witness_data(witness_table));
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (ns(Bytes_vec_len(args)) &amp;lt; 1) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_WRONG_NUMBER_OF_ARGUMENTS;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Continue down the path, we are loading the witness for current input. Corresponding witnesses and inputs have the same index. Right now CKB uses flatbuffer as the serialization format in syscalls, so if this feels weird to you, &lt;a href=&#34;https://github.com/dvidelabs/flatcc&#34;&gt;flatcc&amp;rsquo;s documentation&lt;/a&gt; is your best friend.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;font-style:italic&#34;&gt;/* Load signature */&lt;/span&gt;
len = TEMP_SIZE;
ret = extract_bytes(ns(Bytes_vec_at(args, 0)), temp, &amp;amp;len);
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (ret != CKB_SUCCESS) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_ENCODING;
}

&lt;span style=&#34;font-style:italic&#34;&gt;/* The 65th byte is recid according to contract spec.*/&lt;/span&gt;
recid = temp[RECID_INDEX];
&lt;span style=&#34;font-style:italic&#34;&gt;/* Recover pubkey */&lt;/span&gt;
secp256k1_ecdsa_recoverable_signature signature;
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (secp256k1_ecdsa_recoverable_signature_parse_compact(&amp;amp;context, &amp;amp;signature, temp, recid) == 0) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_SECP_PARSE_SIGNATURE;
}
blake2b_state blake2b_ctx;
blake2b_init(&amp;amp;blake2b_ctx, BLAKE2B_BLOCK_SIZE);
blake2b_update(&amp;amp;blake2b_ctx, tx_hash, BLAKE2B_BLOCK_SIZE);
&lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (size_t i = 1; i &amp;lt; ns(Bytes_vec_len(args)); i++) {
  len = TEMP_SIZE;
  ret = extract_bytes(ns(Bytes_vec_at(args, i)), temp, &amp;amp;len);
  &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (ret != CKB_SUCCESS) {
    &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_ENCODING;
  }
  blake2b_update(&amp;amp;blake2b_ctx, temp, len);
}
blake2b_final(&amp;amp;blake2b_ctx, temp, BLAKE2B_BLOCK_SIZE);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument in witness is the signature to load, while the rest arguments, if presented, are appened to transaction hash for a blake2b operation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;secp256k1_pubkey pubkey;

&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (secp256k1_ecdsa_recover(&amp;amp;context, &amp;amp;pubkey, &amp;amp;signature, temp) != 1) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_SECP_RECOVER_PUBKEY;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the hashed blake2b result as message, we then do secp256 signature verification.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;size_t pubkey_size = PUBKEY_SIZE;
&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (secp256k1_ec_pubkey_serialize(&amp;amp;context, temp, &amp;amp;pubkey_size, &amp;amp;pubkey, SECP256K1_EC_COMPRESSED) != 1 ) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_SECP_SERIALIZE_PUBKEY;
}

len = PUBKEY_SIZE;
blake2b_init(&amp;amp;blake2b_ctx, BLAKE2B_BLOCK_SIZE);
blake2b_update(&amp;amp;blake2b_ctx, temp, len);
blake2b_final(&amp;amp;blake2b_ctx, temp, BLAKE2B_BLOCK_SIZE);

&lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (memcmp(argv[1], temp, BLAKE160_SIZE) != 0) {
  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; ERROR_PUBKEY_BLAKE160_HASH;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Last but not least, we also need to check the pubkey contained from the recoverable signature is indeed the pubkey used to generated the pubkey hash included in the lock script arguments. Otherwise, someone might use a signature generated from a different pubkey to steal your token.&lt;/p&gt;

&lt;p&gt;In short, the scheme used in the default lock script resembles a lot like the solution used in &lt;a href=&#34;https://bitcoin.org/en/transactions-guide#p2pkh-script-validation&#34;&gt;bitcoin now&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;introducing-duktape&#34;&gt;Introducing Duktape&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m sure you feel the same way as I do now: it&amp;rsquo;s good we can write contracts in C, but C always feels a bit tedious and, let&amp;rsquo;s face it, dangerous. Is there a better way?&lt;/p&gt;

&lt;p&gt;Yes of course! We mentioned above CKB VM is essentially a mini computer, and there are tons of solutions we can explore. One thing we have prepared here, is that we can write CKB script codes in JavaScript. Yes you got it right, plain ES5(yes I know, but this is just one example, and you can use a transpiler) JavaScript.&lt;/p&gt;

&lt;p&gt;How this is possible? Since we have C compiler available, all we did is just take a JavaScript implementation for the embeded system, in our case, &lt;a href=&#34;https://duktape.org/&#34;&gt;duktape&lt;/a&gt;, compile it from C to RISC-V binary, put it on chain, then boom, we can run JavaScript in CKB! Since we are working with a real mini computer here, there&amp;rsquo;s no stopping us from embeding another VM as CKB script to CKB VM, and exploring this VM on top of VM path.&lt;/p&gt;

&lt;p&gt;And we can actually expand from this path, we can have JavaScript on CKB via duktape, we can also have Ruby on CKB via &lt;a href=&#34;https://github.com/mruby/mruby&#34;&gt;mruby&lt;/a&gt;, we can even have Bitcoin Script or EVM on chain if we just compile their VM and put it on chain. This ensures CKB VM can both help us preserve legacy and build a diversified ecosystem. All languages should be and are treated equal on CKB, the freedom should be in the hands of blockchain contract developers.&lt;/p&gt;

&lt;p&gt;At this stage you might want to ask: yes this is possible, but won&amp;rsquo;t VM on top of VM be slow? I believe it really depends on your use case to say if this is gonna be slow. I&amp;rsquo;m a firm believer that benchmarks make no sense unless we put it in a real use case with standard hardware requirements. So wait to see if this is really gonna be an issue. In my opinion, higher languages are more likely to be used in type scripts to guard cell transformation, in this case, I doubt it&amp;rsquo;s gonna be slow. Besides, we are also working on this field to optimize both CKB VM and the VMs on top of CKB VM to make it faster and faster :P&lt;/p&gt;

&lt;p&gt;To use duktape on CKB, first you need to compile duktape itself into a RISC-V executable binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/nervosnetwork/ckb-duktape
$ cd ckb-duktape
$ sudo docker run --rm -it -v &lt;span style=&#34;font-style:italic&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;font-style:italic&#34;&gt;`&lt;/span&gt;:/code nervos/ckb-riscv-gnu-toolchain:xenial bash
root@0d31cad7a539:~# cd /code
root@0d31cad7a539:/code# make
riscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Wall -Werror c/entry.c -c -o build/entry.o
riscv64-unknown-elf-gcc -Os -DCKB_NO_MMU -D__riscv_soft_float -D__riscv_float_abi_soft -Iduktape -Ic -Wall -Werror duktape/duktape.c -c -o build/duktape.o
riscv64-unknown-elf-gcc build/entry.o build/duktape.o -o build/duktape -lm -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s
root@0d31cad7a539:/code# exit
exit
$ ls build/duktape
build/duktape*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like the carrot example, the first step here is to deploy duktape script code in a CKB cell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; data = File.read(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;../ckb-duktape/build/duktape&amp;#34;&lt;/span&gt;)
pry(main)&amp;gt; duktape_data.bytesize
=&amp;gt; 269064
pry(main)&amp;gt; duktape_tx_hash = wallet.send_capacity(wallet.address, CKB::Utils.byte_to_shannon(280000), CKB::Utils.bin_to_hex(duktape_data))
pry(main)&amp;gt; duktape_data_hash = CKB::Blake2b.hexdigest(duktape_data)
pry(main)&amp;gt; duktape_out_point = CKB::Types::OutPoint.new(&lt;span style=&#34;font-style:italic&#34;&gt;cell&lt;/span&gt;: CKB::Types::CellOutPoint.new(&lt;span style=&#34;font-style:italic&#34;&gt;tx_hash&lt;/span&gt;: duktape_tx_hash, &lt;span style=&#34;font-style:italic&#34;&gt;index&lt;/span&gt;: 0))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the carrot example, duktape script code now requires one argument: the JavaScript source you want to execute:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; duktape_hello_type_script = CKB::Types::Script.new(&lt;span style=&#34;font-style:italic&#34;&gt;code_hash&lt;/span&gt;: duktape_data_hash, &lt;span style=&#34;font-style:italic&#34;&gt;args&lt;/span&gt;: [CKB::Utils.bin_to_hex(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;CKB.debug(&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;I&amp;#39;m running in JS!&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;)&amp;#34;&lt;/span&gt;)])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that with a different argument, you can create a different duktape powered type script for different use case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; duktape_hello_type_script = CKB::Types::Script.new(&lt;span style=&#34;font-style:italic&#34;&gt;code_hash&lt;/span&gt;: duktape_data_hash, &lt;span style=&#34;font-style:italic&#34;&gt;args&lt;/span&gt;: [CKB::Utils.bin_to_hex(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;var a = 1;&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;var b = a + 2;&amp;#34;&lt;/span&gt;)])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This echos the differences mentioned above on script code vs script: here duktape serves as a script code providing a JavaScript engine, while different script leveraging duktape script code serves different functionalities on chain.&lt;/p&gt;

&lt;p&gt;Now we can create a cell with the duktape type script attached:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;pry(main)&amp;gt; tx = wallet.generate_tx(wallet2.address, CKB::Utils.byte_to_shannon(200))
pry(main)&amp;gt; tx.deps.push(duktape_out_point.dup)
pry(main)&amp;gt; tx.outputs[0].instance_variable_set(&lt;span style=&#34;font-style:italic&#34;&gt;:@type&lt;/span&gt;, duktape_hello_type_script.dup)
pry(main)&amp;gt; tx.witnesses[0].data.clear
pry(main)&amp;gt; tx = tx.sign(wallet.key, api.compute_transaction_hash(tx))
pry(main)&amp;gt; api.send_transaction(tx)
=&amp;gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;0x2e4d3aab4284bc52fc6f07df66e7c8fc0e236916b8a8b8417abb2a2c60824028&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the script executes successfully, and if you have &lt;code&gt;ckb-script&lt;/code&gt; module&amp;rsquo;s log level set to &lt;code&gt;debug&lt;/code&gt; in your &lt;code&gt;ckb.toml&lt;/code&gt; file, you can also notice the following log:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;2019-07-15 05:59:13.551 +00:00 http.worker8 DEBUG ckb-script  script group: c35b9fed5fc0dd6eaef5a918cd7a4e4b77ea93398bece4d4572b67a474874641 DEBUG OUTPUT: I&lt;span style=&#34;&#34;&gt;&amp;#39;&lt;/span&gt;m running in JS!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have successfully deploy a JavaScript engine on CKB, and run JavaScript based script on CKB! Feel free to try any JavaScript code you want here.&lt;/p&gt;

&lt;h1 id=&#34;a-thought-exercise&#34;&gt;A Thought Exercise&lt;/h1&gt;

&lt;p&gt;Now you are familiar with CKB script basics, here&amp;rsquo;s one thought exercise: in this post you&amp;rsquo;ve seen what an always-success script looks like, but what about an always-failure script? How small an always-faliure script(and script code) can be?&lt;/p&gt;

&lt;p&gt;A hint: this is NOT a gcc flag-tweaking optimization contest, this is merely a thought exercise.&lt;/p&gt;

&lt;h1 id=&#34;next&#34;&gt;Next&lt;/h1&gt;

&lt;p&gt;I know this is a long post, I hope you have tried this and successfully deployed a script to CKB. In the next post, we will introduce an important topic: how to issue your own user defined tokens(UDT) on CKB. The best part of UDTs on CKB, is that each user can store their UDTs in their own cells, which is different from ERC20 tokens on Ethereum, where everyone&amp;rsquo;s token will have to live in the token issuer&amp;rsquo;s single address. All of this can be achieved by using type scripts alone. If you are interested please stay tuned :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to CKB Script Programming 1: Validation Model</title>
      <link>https://xuejie.space/2019_07_05_introduction_to_ckb_script_programming_validation_model/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xuejie.space/2019_07_05_introduction_to_ckb_script_programming_validation_model/</guid>
      <description>

&lt;p&gt;As of now, the cell validation model in CKB has been more or less stablized, hence I&amp;rsquo;m starting a series of article introducing CKB script programming here. My goal here is to fill in all the missing implementation details one need to write CKB scripts after reading the whitepaper, so you can start exploring this beautiful wonderland CKB presents.&lt;/p&gt;

&lt;p&gt;You might noticed that I call the code running on CKB as &lt;code&gt;script&lt;/code&gt;, not &lt;code&gt;smart contract&lt;/code&gt;. This is because smart contract is quite a confusing term to me, and I want to use a different word here to indicate CKB&amp;rsquo;s unique programmability. A script in CKB&amp;rsquo;s sense need not be just a script we see in scripting languages such as Ruby, JS, it actually refers to the RISC-V format binary you run on CKB VM.&lt;/p&gt;

&lt;p&gt;This first post here, is dedicated to the brand &lt;a href=&#34;https://github.com/nervosnetwork/ckb/pull/913&#34;&gt;new verification model&lt;/a&gt; introduced in CKB v0.14.0. It might sound boring but I promise you this is the last post without actual examples to play with :P&lt;/p&gt;

&lt;p&gt;Note even though I believe CKB&amp;rsquo;s programming model is quite stable now, development is still happening so there might be changes. I will try my best to make sure this post is updated but if anything confuses you, this post is describing CKB as of &lt;a href=&#34;https://github.com/nervosnetwork/ckb/commit/a02c675c50c5969a588fa7f6356f08861d8f5f92&#34;&gt;this commit&lt;/a&gt; now.&lt;/p&gt;

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Below illustrates a real transaction on CKB:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://xuejie.space/images/tx.svg&#34; alt=&#34;Transaction Example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of things going on in this graph, and we will come back to this graph again in later posts. Today, we will just focus on 2 entities in the cell data structure: &lt;code&gt;lock&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;CellOutput&lt;/span&gt; {
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; capacity: &lt;span style=&#34;font-weight:bold&#34;&gt;Capacity&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; data: &lt;span style=&#34;font-weight:bold&#34;&gt;Bytes&lt;/span&gt;,
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; lock: &lt;span style=&#34;font-weight:bold&#34;&gt;Script&lt;/span&gt;,
    &lt;span style=&#34;&#34;&gt;#[serde(rename = &lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;)]&lt;/span&gt;
    &lt;span style=&#34;font-weight:bold&#34;&gt;pub&lt;/span&gt; type_: Option&amp;lt;Script&amp;gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the data structure we can see that &lt;code&gt;lock&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; shared the same structure, later we can show that they are also executed in the same environment, the differences between them are just in a few tiny bits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock&lt;/code&gt; is required, while &lt;code&gt;type&lt;/code&gt; is optional&lt;/li&gt;
&lt;li&gt;Mentally, they are used to capture different use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will first start with &lt;code&gt;type&lt;/code&gt; script here.&lt;/p&gt;

&lt;h1 id=&#34;type-script&#34;&gt;Type Script&lt;/h1&gt;

&lt;p&gt;Note the name here is just a lucky accident, it is not related to the beloved &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;programming language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you think about it, a transaction on CKB(or most UTXO-based blockchains) just transforms one set of cells(or UTXOs) to another set of cells. What&amp;rsquo;s interesting, is the actual transformation here. That&amp;rsquo;s where we start to design CKB&amp;rsquo;s verification model: how can we build a model to better validate the cell transformations?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s where a &lt;code&gt;type&lt;/code&gt; script comes in play: a type script is used to validate certain rules in the cell transformation phase. Some examples here include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validating UDT(user defined token) balances to ensure no new token is invalidly issued.&lt;/li&gt;
&lt;li&gt;Ensuring a unique name is assigned to a cell that might be mutated. Note this is a fun one, please expect a future article dedicated entirely to this topic.&lt;/li&gt;
&lt;li&gt;Implementing economic constructs. In fact NervosDAO is completely implemented as a &lt;a href=&#34;https://github.com/nervosnetwork/ckb-system-scripts/blob/66d7da8ec72dffaa7e9c55904833951eca2422a9/c/dao.c&#34;&gt;type script&lt;/a&gt; with minimal support from the consensus layer.&lt;/li&gt;
&lt;li&gt;A bitcoin VM can be compiled to RISC-V binary, which can transform CKB into an alternative bitcoin implementation :)&lt;/li&gt;
&lt;li&gt;Keep in mind that in addition to data, cell can be used to store code as well, hence a type script can also be used to run tests on the code in cell to ensure certain behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a nutshell, type script can be used to capture any validation logic you need in the cell transformation. Combined with CKB&amp;rsquo;s flexible virtual machine, I believe this will provide endless potentials.&lt;/p&gt;

&lt;h1 id=&#34;lock-script&#34;&gt;Lock Script&lt;/h1&gt;

&lt;p&gt;Type script captures the cell transformation logic, but there&amp;rsquo;s still one thing missing from the picture: how can I guard my own cell from someone else? In other words, how can I ensure my tokens stay mine in an ever-changing world?&lt;/p&gt;

&lt;p&gt;This is why we designed the always required lock script. A cell can only be consumed when the lock script can be executed sucessfully. This is different from type script, which might be totally optional. A lock script is always there to guard the security of a cell.&lt;/p&gt;

&lt;p&gt;Typically, you would expect that a lock script contains a signature verification phase, like all the other blockchains do, but there are also brand new use cases unlocked by CKB:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The actual signature algorithm is totally determined by the lock script, and you are free to use any lock script. That means you are free to incorporate any signature algorithms that suit your need. In the official CKB distribution we are including &lt;a href=&#34;https://github.com/nervosnetwork/ckb-system-scripts/blob/66d7da8ec72dffaa7e9c55904833951eca2422a9/c/secp256k1_blake160_sighash_all.c&#34;&gt;secp256k1 algorithm&lt;/a&gt; as the default lock script. But you don&amp;rsquo;t have to use this, if someone implements a lock script using schnorr signature, you are more than welcome to use that one.&lt;/li&gt;
&lt;li&gt;In addition to signature verification, a lock script can also include other rules to unlock the cell as well. For example, I can configure my lock script to pass if the transaction contains an output cell that uses my lock script, but has more capacity than my consumed cell. This way when someone sends me capacity, they can consume my existing cell and create a new cell for me. They don&amp;rsquo;t have to create a new cell for me like bitcoin requires.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my personal opinion, the best part of CKB, is that a lock script created by the community is treated exactly the same way as the official default one. No priviledge is granted to the official scripts. Unlike some other blockchains, CKB provides the freedom to develop CKB scripts back to the whole community.&lt;/p&gt;

&lt;h1 id=&#34;execution-model&#34;&gt;Execution Model&lt;/h1&gt;

&lt;p&gt;Now let&amp;rsquo;s see when lock and type scripts are executed.&lt;/p&gt;

&lt;h2 id=&#34;back-to-the-example&#34;&gt;Back to the Example&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s the transaction we see earlier again:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://xuejie.space/images/tx.svg&#34; alt=&#34;Transaction Example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For this example, the execution flow is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Lock Script 1&lt;/code&gt; is executed once.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lock Script 2&lt;/code&gt; is executed once.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Type Script 1&lt;/code&gt; is executed once.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Type Script 2&lt;/code&gt; is executed once.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In later posts we can see both lock and type scripts are executed in the same environment, and both have access to the whole transaction. If any of the script fails, the whole transaction fails. Only when all the scripts succeed, the transaction is considered validated.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re couple of points worth mentioning:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even though there are 2 input cells with &lt;code&gt;Lock Script 1&lt;/code&gt;, it is only executed once, it&amp;rsquo;s up to the actual lock script to locate all the input cells with the same lock script and validate both signature.&lt;/li&gt;
&lt;li&gt;Only lock scripts in input cells are executed in this transaction, for example, &lt;code&gt;Lock Script 3&lt;/code&gt; is not executed here.&lt;/li&gt;
&lt;li&gt;Even though an input cell and an output cell both contain &lt;code&gt;Type Script 1&lt;/code&gt;, it is only executed once.&lt;/li&gt;
&lt;li&gt;Type scripts in both input and output cells are executed, which include &lt;code&gt;Type Script 1&lt;/code&gt; and &lt;code&gt;Type Script 2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some cells do not have type scripts, in this case we just omit the execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rules&#34;&gt;Rules&lt;/h2&gt;

&lt;p&gt;Now to summary the rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lock scripts in input cells are collected and deduped, each unique lock script is executed and only executed once.&lt;/li&gt;
&lt;li&gt;Type scripts in input and output cells(if existed) are collected together and deduped, each unique type script is executed and only executed once.&lt;/li&gt;
&lt;li&gt;If any script fails, the whole transaction validation fails.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s Next&lt;/h1&gt;

&lt;p&gt;Now that cell model is covered, we will look at how to actual write a CKB VM script in the next post. The default secp256k1 lock script will be examined to show the life of a CKB VM script.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://xuejie.space/about/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xuejie.space/about/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m Xuejie Xiao, this is my new site for writing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m currently a blockchain engineer at &lt;a href=&#34;https://www.cryptape.com/&#34;&gt;Cryptape&lt;/a&gt; working on &lt;a href=&#34;https://www.nervos.org/&#34;&gt;Nervos CKB&lt;/a&gt;. I&amp;rsquo;m the main developer on &lt;a href=&#34;https://github.com/nervosnetwork/ckb-vm&#34;&gt;CKB VM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even though I&amp;rsquo;ve heard about Bitcoin for quite some time, I didn&amp;rsquo;t really have enough time to fully dive into the blockchain world till 2017. I&amp;rsquo;ve worked on wallets and mining pool, then found out my true interest lies in blockchain VM. I&amp;rsquo;ve been doing research on virtual machine technologies for blockchain for quite some time, and CKB VM is my latest contribution.&lt;/p&gt;

&lt;p&gt;I also believe the power of simplicity. The only way to make reliable software for the future, should be designing software that are so simple that any bug is obvious. This world is already full of leaky abstraction, let&amp;rsquo;s try hard not to add another one.&lt;/p&gt;

&lt;p&gt;Before that, I worked for &lt;a href=&#34;https://citrusbyte.com/&#34;&gt;Citrusbyte&lt;/a&gt; where we did software consulting services for large enterprise organizations and startups, such as Apple, AT&amp;amp;T, Cast &amp;amp; Crew, etc. I was also once a PhD candidate at &lt;a href=&#34;https://www.syracuse.edu/&#34;&gt;Syracuse University&lt;/a&gt; focusing on high performance computing and cloud computing. Some of my work back then could be found at &lt;a href=&#34;https://ieeexplore.ieee.org/document/7004222/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also spent years working with latest web technologies, such as &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; and &lt;a href=&#34;https://github.com/emscripten-core/emscripten&#34;&gt;emscripten&lt;/a&gt;. I created &lt;a href=&#34;https://github.com/xxuejie/webruby&#34;&gt;webruby&lt;/a&gt;, an introduction on webruby could be found at &lt;a href=&#34;http://rubykaigi.org/2013/talk/S07/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
